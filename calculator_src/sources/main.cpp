

/*
“естовое задание
Ќеобходимо реализовать консольное приложение У алькул€торФ, вычисл€ющее результат
арифметического выражени€. »сходный код и unit testТы необходимо разместить на GitHub и прислать
ссылку. Unit testТы нужно разработать об€зательно. ѕриложение должно собиратьс€ компил€тором gcc
под Linux.

ѕостановка задачи
Ќа вход в программу подаетс€ строка, содержаща€ арифметическое выражение. ¬ыражение может
содержать числа с точностью до двух знаков после зап€той, любое количество скобок, арифметические
операции '+', '-', '*', '/' и любое количество пробелов. –азделителем дес€тичной части в числе может
быть как '.', так и ','. ћожно допустить, что все числа и результат вычислени€ по модулю меньше 10 000 000. 
ѕриложение должно округл€ть результат выражени€ до двух знаков после зап€той.

ѕримеры
¬ходное выражение: У-1 + 5 - 3Ф
–езультат: У1Ф
¬ходное выражение: У-10 + (8 * 2.5) - (3 / 1,5)Ф
–езультат: У8Ф
¬ходное выражение: У1 + (2 * (2.5 + 2.5 + (3 - 2))) - (3 / 1.5)Ф
–езультат: У11Ф
¬ходное выражение: У1.1 + 2.1 + abcФ
–езультат: Унекорректный ввод, строка содержит недопустимое выражение abcФ
*/


#include <string>
#include <iostream>
#include <iomanip>
#include "calculator.h"

// ------------------------------------------------------------------
int main(int _argc, char** _argv) {
    std::cout << "Enter the expression(q for exit): \n";

    while (true) {
        try {
            std::string expr;
            std::getline( std::cin, expr );

            if ( expr.length() > 0 ) {
                if ( "q" == expr ) {
                    break; // while
                }
                Calculator ts( std::move(expr) );
                std::cout << std::setprecision(2) << std::fixed << ts.Calculate() << std::endl;
            }
        }
        catch (std::runtime_error& _ex) {
            std::cout << _ex.what() << std::endl;
        }
        catch (...) {
            std::cout << "unknown error!" << std::endl;
        }
    }
    return 0;
}


